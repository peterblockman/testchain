// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { PacketSequence } from "./types/ibc/core/channel/v2/genesis";
import { Packet } from "./types/ibc/core/channel/v2/packet";
import { MsgSendPacket } from "./types/ibc/core/channel/v2/tx";
import { MsgAcknowledgement } from "./types/ibc/core/channel/v2/tx";
import { QueryPacketCommitmentsResponse } from "./types/ibc/core/channel/v2/query";
import { QueryPacketAcknowledgementRequest } from "./types/ibc/core/channel/v2/query";
import { QueryPacketAcknowledgementResponse } from "./types/ibc/core/channel/v2/query";
import { QueryPacketAcknowledgementsResponse } from "./types/ibc/core/channel/v2/query";
import { MsgTimeout } from "./types/ibc/core/channel/v2/tx";
import { MsgAcknowledgementResponse } from "./types/ibc/core/channel/v2/tx";
import { RecvPacketResult } from "./types/ibc/core/channel/v2/packet";
import { QueryNextSequenceSendResponse } from "./types/ibc/core/channel/v2/query";
import { QueryUnreceivedPacketsRequest } from "./types/ibc/core/channel/v2/query";
import { PacketState } from "./types/ibc/core/channel/v2/genesis";
import { Payload } from "./types/ibc/core/channel/v2/packet";
import { QueryNextSequenceSendRequest } from "./types/ibc/core/channel/v2/query";
import { QueryPacketCommitmentResponse } from "./types/ibc/core/channel/v2/query";
import { QueryPacketReceiptRequest } from "./types/ibc/core/channel/v2/query";
import { MsgTimeoutResponse } from "./types/ibc/core/channel/v2/tx";
import { QueryUnreceivedAcksResponse } from "./types/ibc/core/channel/v2/query";
import { Acknowledgement } from "./types/ibc/core/channel/v2/packet";
import { QueryPacketReceiptResponse } from "./types/ibc/core/channel/v2/query";
import { MsgSendPacketResponse } from "./types/ibc/core/channel/v2/tx";
import { MsgRecvPacket } from "./types/ibc/core/channel/v2/tx";
import { QueryPacketCommitmentRequest } from "./types/ibc/core/channel/v2/query";
import { QueryPacketAcknowledgementsRequest } from "./types/ibc/core/channel/v2/query";
import { QueryUnreceivedAcksRequest } from "./types/ibc/core/channel/v2/query";
import { MsgRecvPacketResponse } from "./types/ibc/core/channel/v2/tx";
import { GenesisState } from "./types/ibc/core/channel/v2/genesis";
import { QueryPacketCommitmentsRequest } from "./types/ibc/core/channel/v2/query";
import { QueryUnreceivedPacketsResponse } from "./types/ibc/core/channel/v2/query";

import { PacketState as typePacketState} from "./types"
import { PacketSequence as typePacketSequence} from "./types"
import { Packet as typePacket} from "./types"
import { Payload as typePayload} from "./types"
import { Acknowledgement as typeAcknowledgement} from "./types"
import { RecvPacketResult as typeRecvPacketResult} from "./types"

export { PacketSequence, Packet, MsgSendPacket, MsgAcknowledgement, QueryPacketCommitmentsResponse, QueryPacketAcknowledgementRequest, QueryPacketAcknowledgementResponse, QueryPacketAcknowledgementsResponse, MsgTimeout, MsgAcknowledgementResponse, RecvPacketResult, QueryNextSequenceSendResponse, QueryUnreceivedPacketsRequest, PacketState, Payload, QueryNextSequenceSendRequest, QueryPacketCommitmentResponse, QueryPacketReceiptRequest, MsgTimeoutResponse, QueryUnreceivedAcksResponse, Acknowledgement, QueryPacketReceiptResponse, MsgSendPacketResponse, MsgRecvPacket, QueryPacketCommitmentRequest, QueryPacketAcknowledgementsRequest, QueryUnreceivedAcksRequest, MsgRecvPacketResponse, GenesisState, QueryPacketCommitmentsRequest, QueryUnreceivedPacketsResponse };

type sendPacketSequenceParams = {
  value: PacketSequence,
  fee?: StdFee,
  memo?: string
};

type sendPacketParams = {
  value: Packet,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendPacketParams = {
  value: MsgSendPacket,
  fee?: StdFee,
  memo?: string
};

type sendMsgAcknowledgementParams = {
  value: MsgAcknowledgement,
  fee?: StdFee,
  memo?: string
};

type sendQueryPacketCommitmentsResponseParams = {
  value: QueryPacketCommitmentsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryPacketAcknowledgementRequestParams = {
  value: QueryPacketAcknowledgementRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryPacketAcknowledgementResponseParams = {
  value: QueryPacketAcknowledgementResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryPacketAcknowledgementsResponseParams = {
  value: QueryPacketAcknowledgementsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgTimeoutParams = {
  value: MsgTimeout,
  fee?: StdFee,
  memo?: string
};

type sendMsgAcknowledgementResponseParams = {
  value: MsgAcknowledgementResponse,
  fee?: StdFee,
  memo?: string
};

type sendRecvPacketResultParams = {
  value: RecvPacketResult,
  fee?: StdFee,
  memo?: string
};

type sendQueryNextSequenceSendResponseParams = {
  value: QueryNextSequenceSendResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryUnreceivedPacketsRequestParams = {
  value: QueryUnreceivedPacketsRequest,
  fee?: StdFee,
  memo?: string
};

type sendPacketStateParams = {
  value: PacketState,
  fee?: StdFee,
  memo?: string
};

type sendPayloadParams = {
  value: Payload,
  fee?: StdFee,
  memo?: string
};

type sendQueryNextSequenceSendRequestParams = {
  value: QueryNextSequenceSendRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryPacketCommitmentResponseParams = {
  value: QueryPacketCommitmentResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryPacketReceiptRequestParams = {
  value: QueryPacketReceiptRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgTimeoutResponseParams = {
  value: MsgTimeoutResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryUnreceivedAcksResponseParams = {
  value: QueryUnreceivedAcksResponse,
  fee?: StdFee,
  memo?: string
};

type sendAcknowledgementParams = {
  value: Acknowledgement,
  fee?: StdFee,
  memo?: string
};

type sendQueryPacketReceiptResponseParams = {
  value: QueryPacketReceiptResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendPacketResponseParams = {
  value: MsgSendPacketResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgRecvPacketParams = {
  value: MsgRecvPacket,
  fee?: StdFee,
  memo?: string
};

type sendQueryPacketCommitmentRequestParams = {
  value: QueryPacketCommitmentRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryPacketAcknowledgementsRequestParams = {
  value: QueryPacketAcknowledgementsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryUnreceivedAcksRequestParams = {
  value: QueryUnreceivedAcksRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgRecvPacketResponseParams = {
  value: MsgRecvPacketResponse,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryPacketCommitmentsRequestParams = {
  value: QueryPacketCommitmentsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryUnreceivedPacketsResponseParams = {
  value: QueryUnreceivedPacketsResponse,
  fee?: StdFee,
  memo?: string
};


type packetSequenceParams = {
  value: PacketSequence,
};

type packetParams = {
  value: Packet,
};

type msgSendPacketParams = {
  value: MsgSendPacket,
};

type msgAcknowledgementParams = {
  value: MsgAcknowledgement,
};

type queryPacketCommitmentsResponseParams = {
  value: QueryPacketCommitmentsResponse,
};

type queryPacketAcknowledgementRequestParams = {
  value: QueryPacketAcknowledgementRequest,
};

type queryPacketAcknowledgementResponseParams = {
  value: QueryPacketAcknowledgementResponse,
};

type queryPacketAcknowledgementsResponseParams = {
  value: QueryPacketAcknowledgementsResponse,
};

type msgTimeoutParams = {
  value: MsgTimeout,
};

type msgAcknowledgementResponseParams = {
  value: MsgAcknowledgementResponse,
};

type recvPacketResultParams = {
  value: RecvPacketResult,
};

type queryNextSequenceSendResponseParams = {
  value: QueryNextSequenceSendResponse,
};

type queryUnreceivedPacketsRequestParams = {
  value: QueryUnreceivedPacketsRequest,
};

type packetStateParams = {
  value: PacketState,
};

type payloadParams = {
  value: Payload,
};

type queryNextSequenceSendRequestParams = {
  value: QueryNextSequenceSendRequest,
};

type queryPacketCommitmentResponseParams = {
  value: QueryPacketCommitmentResponse,
};

type queryPacketReceiptRequestParams = {
  value: QueryPacketReceiptRequest,
};

type msgTimeoutResponseParams = {
  value: MsgTimeoutResponse,
};

type queryUnreceivedAcksResponseParams = {
  value: QueryUnreceivedAcksResponse,
};

type acknowledgementParams = {
  value: Acknowledgement,
};

type queryPacketReceiptResponseParams = {
  value: QueryPacketReceiptResponse,
};

type msgSendPacketResponseParams = {
  value: MsgSendPacketResponse,
};

type msgRecvPacketParams = {
  value: MsgRecvPacket,
};

type queryPacketCommitmentRequestParams = {
  value: QueryPacketCommitmentRequest,
};

type queryPacketAcknowledgementsRequestParams = {
  value: QueryPacketAcknowledgementsRequest,
};

type queryUnreceivedAcksRequestParams = {
  value: QueryUnreceivedAcksRequest,
};

type msgRecvPacketResponseParams = {
  value: MsgRecvPacketResponse,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryPacketCommitmentsRequestParams = {
  value: QueryPacketCommitmentsRequest,
};

type queryUnreceivedPacketsResponseParams = {
  value: QueryUnreceivedPacketsResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendPacketSequence({ value, fee, memo }: sendPacketSequenceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendPacketSequence: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.packetSequence({ value: PacketSequence.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendPacketSequence: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendPacket({ value, fee, memo }: sendPacketParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendPacket: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.packet({ value: Packet.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendPacket: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendPacket({ value, fee, memo }: sendMsgSendPacketParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendPacket: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSendPacket({ value: MsgSendPacket.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendPacket: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAcknowledgement({ value, fee, memo }: sendMsgAcknowledgementParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAcknowledgement: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAcknowledgement({ value: MsgAcknowledgement.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAcknowledgement: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryPacketCommitmentsResponse({ value, fee, memo }: sendQueryPacketCommitmentsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryPacketCommitmentsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryPacketCommitmentsResponse({ value: QueryPacketCommitmentsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryPacketCommitmentsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryPacketAcknowledgementRequest({ value, fee, memo }: sendQueryPacketAcknowledgementRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryPacketAcknowledgementRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryPacketAcknowledgementRequest({ value: QueryPacketAcknowledgementRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryPacketAcknowledgementRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryPacketAcknowledgementResponse({ value, fee, memo }: sendQueryPacketAcknowledgementResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryPacketAcknowledgementResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryPacketAcknowledgementResponse({ value: QueryPacketAcknowledgementResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryPacketAcknowledgementResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryPacketAcknowledgementsResponse({ value, fee, memo }: sendQueryPacketAcknowledgementsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryPacketAcknowledgementsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryPacketAcknowledgementsResponse({ value: QueryPacketAcknowledgementsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryPacketAcknowledgementsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgTimeout({ value, fee, memo }: sendMsgTimeoutParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgTimeout: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgTimeout({ value: MsgTimeout.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgTimeout: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAcknowledgementResponse({ value, fee, memo }: sendMsgAcknowledgementResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAcknowledgementResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAcknowledgementResponse({ value: MsgAcknowledgementResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAcknowledgementResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendRecvPacketResult({ value, fee, memo }: sendRecvPacketResultParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendRecvPacketResult: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.recvPacketResult({ value: RecvPacketResult.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendRecvPacketResult: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryNextSequenceSendResponse({ value, fee, memo }: sendQueryNextSequenceSendResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryNextSequenceSendResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryNextSequenceSendResponse({ value: QueryNextSequenceSendResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryNextSequenceSendResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryUnreceivedPacketsRequest({ value, fee, memo }: sendQueryUnreceivedPacketsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryUnreceivedPacketsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryUnreceivedPacketsRequest({ value: QueryUnreceivedPacketsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryUnreceivedPacketsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendPacketState({ value, fee, memo }: sendPacketStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendPacketState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.packetState({ value: PacketState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendPacketState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendPayload({ value, fee, memo }: sendPayloadParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendPayload: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.payload({ value: Payload.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendPayload: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryNextSequenceSendRequest({ value, fee, memo }: sendQueryNextSequenceSendRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryNextSequenceSendRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryNextSequenceSendRequest({ value: QueryNextSequenceSendRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryNextSequenceSendRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryPacketCommitmentResponse({ value, fee, memo }: sendQueryPacketCommitmentResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryPacketCommitmentResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryPacketCommitmentResponse({ value: QueryPacketCommitmentResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryPacketCommitmentResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryPacketReceiptRequest({ value, fee, memo }: sendQueryPacketReceiptRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryPacketReceiptRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryPacketReceiptRequest({ value: QueryPacketReceiptRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryPacketReceiptRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgTimeoutResponse({ value, fee, memo }: sendMsgTimeoutResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgTimeoutResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgTimeoutResponse({ value: MsgTimeoutResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgTimeoutResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryUnreceivedAcksResponse({ value, fee, memo }: sendQueryUnreceivedAcksResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryUnreceivedAcksResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryUnreceivedAcksResponse({ value: QueryUnreceivedAcksResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryUnreceivedAcksResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendAcknowledgement({ value, fee, memo }: sendAcknowledgementParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendAcknowledgement: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.acknowledgement({ value: Acknowledgement.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendAcknowledgement: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryPacketReceiptResponse({ value, fee, memo }: sendQueryPacketReceiptResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryPacketReceiptResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryPacketReceiptResponse({ value: QueryPacketReceiptResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryPacketReceiptResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendPacketResponse({ value, fee, memo }: sendMsgSendPacketResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendPacketResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSendPacketResponse({ value: MsgSendPacketResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendPacketResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRecvPacket({ value, fee, memo }: sendMsgRecvPacketParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRecvPacket: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRecvPacket({ value: MsgRecvPacket.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRecvPacket: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryPacketCommitmentRequest({ value, fee, memo }: sendQueryPacketCommitmentRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryPacketCommitmentRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryPacketCommitmentRequest({ value: QueryPacketCommitmentRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryPacketCommitmentRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryPacketAcknowledgementsRequest({ value, fee, memo }: sendQueryPacketAcknowledgementsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryPacketAcknowledgementsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryPacketAcknowledgementsRequest({ value: QueryPacketAcknowledgementsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryPacketAcknowledgementsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryUnreceivedAcksRequest({ value, fee, memo }: sendQueryUnreceivedAcksRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryUnreceivedAcksRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryUnreceivedAcksRequest({ value: QueryUnreceivedAcksRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryUnreceivedAcksRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRecvPacketResponse({ value, fee, memo }: sendMsgRecvPacketResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRecvPacketResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRecvPacketResponse({ value: MsgRecvPacketResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRecvPacketResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryPacketCommitmentsRequest({ value, fee, memo }: sendQueryPacketCommitmentsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryPacketCommitmentsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryPacketCommitmentsRequest({ value: QueryPacketCommitmentsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryPacketCommitmentsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryUnreceivedPacketsResponse({ value, fee, memo }: sendQueryUnreceivedPacketsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryUnreceivedPacketsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryUnreceivedPacketsResponse({ value: QueryUnreceivedPacketsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryUnreceivedPacketsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		packetSequence({ value }: packetSequenceParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.PacketSequence", value: PacketSequence.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:PacketSequence: Could not create message: ' + e.message)
			}
		},
		
		packet({ value }: packetParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.Packet", value: Packet.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Packet: Could not create message: ' + e.message)
			}
		},
		
		msgSendPacket({ value }: msgSendPacketParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.MsgSendPacket", value: MsgSendPacket.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendPacket: Could not create message: ' + e.message)
			}
		},
		
		msgAcknowledgement({ value }: msgAcknowledgementParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.MsgAcknowledgement", value: MsgAcknowledgement.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAcknowledgement: Could not create message: ' + e.message)
			}
		},
		
		queryPacketCommitmentsResponse({ value }: queryPacketCommitmentsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryPacketCommitmentsResponse", value: QueryPacketCommitmentsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryPacketCommitmentsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryPacketAcknowledgementRequest({ value }: queryPacketAcknowledgementRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryPacketAcknowledgementRequest", value: QueryPacketAcknowledgementRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryPacketAcknowledgementRequest: Could not create message: ' + e.message)
			}
		},
		
		queryPacketAcknowledgementResponse({ value }: queryPacketAcknowledgementResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryPacketAcknowledgementResponse", value: QueryPacketAcknowledgementResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryPacketAcknowledgementResponse: Could not create message: ' + e.message)
			}
		},
		
		queryPacketAcknowledgementsResponse({ value }: queryPacketAcknowledgementsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryPacketAcknowledgementsResponse", value: QueryPacketAcknowledgementsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryPacketAcknowledgementsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgTimeout({ value }: msgTimeoutParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.MsgTimeout", value: MsgTimeout.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgTimeout: Could not create message: ' + e.message)
			}
		},
		
		msgAcknowledgementResponse({ value }: msgAcknowledgementResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.MsgAcknowledgementResponse", value: MsgAcknowledgementResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAcknowledgementResponse: Could not create message: ' + e.message)
			}
		},
		
		recvPacketResult({ value }: recvPacketResultParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.RecvPacketResult", value: RecvPacketResult.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:RecvPacketResult: Could not create message: ' + e.message)
			}
		},
		
		queryNextSequenceSendResponse({ value }: queryNextSequenceSendResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryNextSequenceSendResponse", value: QueryNextSequenceSendResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryNextSequenceSendResponse: Could not create message: ' + e.message)
			}
		},
		
		queryUnreceivedPacketsRequest({ value }: queryUnreceivedPacketsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryUnreceivedPacketsRequest", value: QueryUnreceivedPacketsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryUnreceivedPacketsRequest: Could not create message: ' + e.message)
			}
		},
		
		packetState({ value }: packetStateParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.PacketState", value: PacketState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:PacketState: Could not create message: ' + e.message)
			}
		},
		
		payload({ value }: payloadParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.Payload", value: Payload.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Payload: Could not create message: ' + e.message)
			}
		},
		
		queryNextSequenceSendRequest({ value }: queryNextSequenceSendRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryNextSequenceSendRequest", value: QueryNextSequenceSendRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryNextSequenceSendRequest: Could not create message: ' + e.message)
			}
		},
		
		queryPacketCommitmentResponse({ value }: queryPacketCommitmentResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryPacketCommitmentResponse", value: QueryPacketCommitmentResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryPacketCommitmentResponse: Could not create message: ' + e.message)
			}
		},
		
		queryPacketReceiptRequest({ value }: queryPacketReceiptRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryPacketReceiptRequest", value: QueryPacketReceiptRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryPacketReceiptRequest: Could not create message: ' + e.message)
			}
		},
		
		msgTimeoutResponse({ value }: msgTimeoutResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.MsgTimeoutResponse", value: MsgTimeoutResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgTimeoutResponse: Could not create message: ' + e.message)
			}
		},
		
		queryUnreceivedAcksResponse({ value }: queryUnreceivedAcksResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryUnreceivedAcksResponse", value: QueryUnreceivedAcksResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryUnreceivedAcksResponse: Could not create message: ' + e.message)
			}
		},
		
		acknowledgement({ value }: acknowledgementParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.Acknowledgement", value: Acknowledgement.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Acknowledgement: Could not create message: ' + e.message)
			}
		},
		
		queryPacketReceiptResponse({ value }: queryPacketReceiptResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryPacketReceiptResponse", value: QueryPacketReceiptResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryPacketReceiptResponse: Could not create message: ' + e.message)
			}
		},
		
		msgSendPacketResponse({ value }: msgSendPacketResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.MsgSendPacketResponse", value: MsgSendPacketResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendPacketResponse: Could not create message: ' + e.message)
			}
		},
		
		msgRecvPacket({ value }: msgRecvPacketParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.MsgRecvPacket", value: MsgRecvPacket.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRecvPacket: Could not create message: ' + e.message)
			}
		},
		
		queryPacketCommitmentRequest({ value }: queryPacketCommitmentRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryPacketCommitmentRequest", value: QueryPacketCommitmentRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryPacketCommitmentRequest: Could not create message: ' + e.message)
			}
		},
		
		queryPacketAcknowledgementsRequest({ value }: queryPacketAcknowledgementsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryPacketAcknowledgementsRequest", value: QueryPacketAcknowledgementsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryPacketAcknowledgementsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryUnreceivedAcksRequest({ value }: queryUnreceivedAcksRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryUnreceivedAcksRequest", value: QueryUnreceivedAcksRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryUnreceivedAcksRequest: Could not create message: ' + e.message)
			}
		},
		
		msgRecvPacketResponse({ value }: msgRecvPacketResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.MsgRecvPacketResponse", value: MsgRecvPacketResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRecvPacketResponse: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryPacketCommitmentsRequest({ value }: queryPacketCommitmentsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryPacketCommitmentsRequest", value: QueryPacketCommitmentsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryPacketCommitmentsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryUnreceivedPacketsResponse({ value }: queryUnreceivedPacketsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v2.QueryUnreceivedPacketsResponse", value: QueryUnreceivedPacketsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryUnreceivedPacketsResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						PacketState: getStructure(typePacketState.fromPartial({})),
						PacketSequence: getStructure(typePacketSequence.fromPartial({})),
						Packet: getStructure(typePacket.fromPartial({})),
						Payload: getStructure(typePayload.fromPartial({})),
						Acknowledgement: getStructure(typeAcknowledgement.fromPartial({})),
						RecvPacketResult: getStructure(typeRecvPacketResult.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			IbcCoreChannelV2: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;