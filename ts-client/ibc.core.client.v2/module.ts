// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { QueryCounterpartyInfoResponse } from "./types/ibc/core/client/v2/query";
import { MsgUpdateClientConfig } from "./types/ibc/core/client/v2/tx";
import { GenesisCounterpartyInfo } from "./types/ibc/core/client/v2/genesis";
import { GenesisState } from "./types/ibc/core/client/v2/genesis";
import { MsgRegisterCounterpartyResponse } from "./types/ibc/core/client/v2/tx";
import { Config } from "./types/ibc/core/client/v2/config";
import { CounterpartyInfo } from "./types/ibc/core/client/v2/counterparty";
import { QueryCounterpartyInfoRequest } from "./types/ibc/core/client/v2/query";
import { QueryConfigResponse } from "./types/ibc/core/client/v2/query";
import { QueryConfigRequest } from "./types/ibc/core/client/v2/query";
import { MsgRegisterCounterparty } from "./types/ibc/core/client/v2/tx";
import { MsgUpdateClientConfigResponse } from "./types/ibc/core/client/v2/tx";

import { Config as typeConfig} from "./types"
import { CounterpartyInfo as typeCounterpartyInfo} from "./types"
import { GenesisCounterpartyInfo as typeGenesisCounterpartyInfo} from "./types"

export { QueryCounterpartyInfoResponse, MsgUpdateClientConfig, GenesisCounterpartyInfo, GenesisState, MsgRegisterCounterpartyResponse, Config, CounterpartyInfo, QueryCounterpartyInfoRequest, QueryConfigResponse, QueryConfigRequest, MsgRegisterCounterparty, MsgUpdateClientConfigResponse };

type sendQueryCounterpartyInfoResponseParams = {
  value: QueryCounterpartyInfoResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateClientConfigParams = {
  value: MsgUpdateClientConfig,
  fee?: StdFee,
  memo?: string
};

type sendGenesisCounterpartyInfoParams = {
  value: GenesisCounterpartyInfo,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendMsgRegisterCounterpartyResponseParams = {
  value: MsgRegisterCounterpartyResponse,
  fee?: StdFee,
  memo?: string
};

type sendConfigParams = {
  value: Config,
  fee?: StdFee,
  memo?: string
};

type sendCounterpartyInfoParams = {
  value: CounterpartyInfo,
  fee?: StdFee,
  memo?: string
};

type sendQueryCounterpartyInfoRequestParams = {
  value: QueryCounterpartyInfoRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryConfigResponseParams = {
  value: QueryConfigResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryConfigRequestParams = {
  value: QueryConfigRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgRegisterCounterpartyParams = {
  value: MsgRegisterCounterparty,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateClientConfigResponseParams = {
  value: MsgUpdateClientConfigResponse,
  fee?: StdFee,
  memo?: string
};


type queryCounterpartyInfoResponseParams = {
  value: QueryCounterpartyInfoResponse,
};

type msgUpdateClientConfigParams = {
  value: MsgUpdateClientConfig,
};

type genesisCounterpartyInfoParams = {
  value: GenesisCounterpartyInfo,
};

type genesisStateParams = {
  value: GenesisState,
};

type msgRegisterCounterpartyResponseParams = {
  value: MsgRegisterCounterpartyResponse,
};

type configParams = {
  value: Config,
};

type counterpartyInfoParams = {
  value: CounterpartyInfo,
};

type queryCounterpartyInfoRequestParams = {
  value: QueryCounterpartyInfoRequest,
};

type queryConfigResponseParams = {
  value: QueryConfigResponse,
};

type queryConfigRequestParams = {
  value: QueryConfigRequest,
};

type msgRegisterCounterpartyParams = {
  value: MsgRegisterCounterparty,
};

type msgUpdateClientConfigResponseParams = {
  value: MsgUpdateClientConfigResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendQueryCounterpartyInfoResponse({ value, fee, memo }: sendQueryCounterpartyInfoResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryCounterpartyInfoResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryCounterpartyInfoResponse({ value: QueryCounterpartyInfoResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryCounterpartyInfoResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateClientConfig({ value, fee, memo }: sendMsgUpdateClientConfigParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateClientConfig: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateClientConfig({ value: MsgUpdateClientConfig.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateClientConfig: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisCounterpartyInfo({ value, fee, memo }: sendGenesisCounterpartyInfoParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisCounterpartyInfo: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisCounterpartyInfo({ value: GenesisCounterpartyInfo.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisCounterpartyInfo: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRegisterCounterpartyResponse({ value, fee, memo }: sendMsgRegisterCounterpartyResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRegisterCounterpartyResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRegisterCounterpartyResponse({ value: MsgRegisterCounterpartyResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRegisterCounterpartyResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendConfig({ value, fee, memo }: sendConfigParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendConfig: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.config({ value: Config.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendConfig: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendCounterpartyInfo({ value, fee, memo }: sendCounterpartyInfoParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendCounterpartyInfo: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.counterpartyInfo({ value: CounterpartyInfo.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendCounterpartyInfo: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryCounterpartyInfoRequest({ value, fee, memo }: sendQueryCounterpartyInfoRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryCounterpartyInfoRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryCounterpartyInfoRequest({ value: QueryCounterpartyInfoRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryCounterpartyInfoRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryConfigResponse({ value, fee, memo }: sendQueryConfigResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryConfigResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryConfigResponse({ value: QueryConfigResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryConfigResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryConfigRequest({ value, fee, memo }: sendQueryConfigRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryConfigRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryConfigRequest({ value: QueryConfigRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryConfigRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRegisterCounterparty({ value, fee, memo }: sendMsgRegisterCounterpartyParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRegisterCounterparty: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRegisterCounterparty({ value: MsgRegisterCounterparty.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRegisterCounterparty: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateClientConfigResponse({ value, fee, memo }: sendMsgUpdateClientConfigResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateClientConfigResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateClientConfigResponse({ value: MsgUpdateClientConfigResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateClientConfigResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		queryCounterpartyInfoResponse({ value }: queryCounterpartyInfoResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.QueryCounterpartyInfoResponse", value: QueryCounterpartyInfoResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryCounterpartyInfoResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateClientConfig({ value }: msgUpdateClientConfigParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.MsgUpdateClientConfig", value: MsgUpdateClientConfig.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateClientConfig: Could not create message: ' + e.message)
			}
		},
		
		genesisCounterpartyInfo({ value }: genesisCounterpartyInfoParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.GenesisCounterpartyInfo", value: GenesisCounterpartyInfo.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisCounterpartyInfo: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		msgRegisterCounterpartyResponse({ value }: msgRegisterCounterpartyResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.MsgRegisterCounterpartyResponse", value: MsgRegisterCounterpartyResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRegisterCounterpartyResponse: Could not create message: ' + e.message)
			}
		},
		
		config({ value }: configParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.Config", value: Config.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Config: Could not create message: ' + e.message)
			}
		},
		
		counterpartyInfo({ value }: counterpartyInfoParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.CounterpartyInfo", value: CounterpartyInfo.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:CounterpartyInfo: Could not create message: ' + e.message)
			}
		},
		
		queryCounterpartyInfoRequest({ value }: queryCounterpartyInfoRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.QueryCounterpartyInfoRequest", value: QueryCounterpartyInfoRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryCounterpartyInfoRequest: Could not create message: ' + e.message)
			}
		},
		
		queryConfigResponse({ value }: queryConfigResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.QueryConfigResponse", value: QueryConfigResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryConfigResponse: Could not create message: ' + e.message)
			}
		},
		
		queryConfigRequest({ value }: queryConfigRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.QueryConfigRequest", value: QueryConfigRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryConfigRequest: Could not create message: ' + e.message)
			}
		},
		
		msgRegisterCounterparty({ value }: msgRegisterCounterpartyParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.MsgRegisterCounterparty", value: MsgRegisterCounterparty.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRegisterCounterparty: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateClientConfigResponse({ value }: msgUpdateClientConfigResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v2.MsgUpdateClientConfigResponse", value: MsgUpdateClientConfigResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateClientConfigResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Config: getStructure(typeConfig.fromPartial({})),
						CounterpartyInfo: getStructure(typeCounterpartyInfo.fromPartial({})),
						GenesisCounterpartyInfo: getStructure(typeGenesisCounterpartyInfo.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			IbcCoreClientV2: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;