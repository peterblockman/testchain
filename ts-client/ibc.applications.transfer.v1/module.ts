// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { QueryDenomHashResponse } from "./types/ibc/applications/transfer/v1/query";
import { QueryEscrowAddressResponse } from "./types/ibc/applications/transfer/v1/query";
import { TransferAuthorization } from "./types/ibc/applications/transfer/v1/authz";
import { QueryParamsResponse } from "./types/ibc/applications/transfer/v1/query";
import { QueryDenomsRequest } from "./types/ibc/applications/transfer/v1/query";
import { QueryDenomsResponse } from "./types/ibc/applications/transfer/v1/query";
import { MsgTransferResponse } from "./types/ibc/applications/transfer/v1/tx";
import { MsgUpdateParamsResponse } from "./types/ibc/applications/transfer/v1/tx";
import { QueryDenomHashRequest } from "./types/ibc/applications/transfer/v1/query";
import { QueryTotalEscrowForDenomRequest } from "./types/ibc/applications/transfer/v1/query";
import { QueryTotalEscrowForDenomResponse } from "./types/ibc/applications/transfer/v1/query";
import { Token } from "./types/ibc/applications/transfer/v1/token";
import { GenesisState } from "./types/ibc/applications/transfer/v1/genesis";
import { QueryDenomResponse } from "./types/ibc/applications/transfer/v1/query";
import { MsgTransfer } from "./types/ibc/applications/transfer/v1/tx";
import { Denom } from "./types/ibc/applications/transfer/v1/token";
import { Hop } from "./types/ibc/applications/transfer/v1/token";
import { Allocation } from "./types/ibc/applications/transfer/v1/authz";
import { QueryParamsRequest } from "./types/ibc/applications/transfer/v1/query";
import { QueryDenomRequest } from "./types/ibc/applications/transfer/v1/query";
import { FungibleTokenPacketData } from "./types/ibc/applications/transfer/v1/packet";
import { QueryEscrowAddressRequest } from "./types/ibc/applications/transfer/v1/query";
import { Params } from "./types/ibc/applications/transfer/v1/transfer";
import { MsgUpdateParams } from "./types/ibc/applications/transfer/v1/tx";

import { Allocation as typeAllocation} from "./types"
import { TransferAuthorization as typeTransferAuthorization} from "./types"
import { DenomTrace as typeDenomTrace} from "./types"
import { FungibleTokenPacketData as typeFungibleTokenPacketData} from "./types"
import { Token as typeToken} from "./types"
import { Denom as typeDenom} from "./types"
import { Hop as typeHop} from "./types"
import { Params as typeParams} from "./types"

export { QueryDenomHashResponse, QueryEscrowAddressResponse, TransferAuthorization, QueryParamsResponse, QueryDenomsRequest, QueryDenomsResponse, MsgTransferResponse, MsgUpdateParamsResponse, QueryDenomHashRequest, QueryTotalEscrowForDenomRequest, QueryTotalEscrowForDenomResponse, Token, GenesisState, QueryDenomResponse, MsgTransfer, Denom, Hop, Allocation, QueryParamsRequest, QueryDenomRequest, FungibleTokenPacketData, QueryEscrowAddressRequest, Params, MsgUpdateParams };

type sendQueryDenomHashResponseParams = {
  value: QueryDenomHashResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryEscrowAddressResponseParams = {
  value: QueryEscrowAddressResponse,
  fee?: StdFee,
  memo?: string
};

type sendTransferAuthorizationParams = {
  value: TransferAuthorization,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryDenomsRequestParams = {
  value: QueryDenomsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryDenomsResponseParams = {
  value: QueryDenomsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgTransferResponseParams = {
  value: MsgTransferResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryDenomHashRequestParams = {
  value: QueryDenomHashRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryTotalEscrowForDenomRequestParams = {
  value: QueryTotalEscrowForDenomRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryTotalEscrowForDenomResponseParams = {
  value: QueryTotalEscrowForDenomResponse,
  fee?: StdFee,
  memo?: string
};

type sendTokenParams = {
  value: Token,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryDenomResponseParams = {
  value: QueryDenomResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgTransferParams = {
  value: MsgTransfer,
  fee?: StdFee,
  memo?: string
};

type sendDenomParams = {
  value: Denom,
  fee?: StdFee,
  memo?: string
};

type sendHopParams = {
  value: Hop,
  fee?: StdFee,
  memo?: string
};

type sendAllocationParams = {
  value: Allocation,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryDenomRequestParams = {
  value: QueryDenomRequest,
  fee?: StdFee,
  memo?: string
};

type sendFungibleTokenPacketDataParams = {
  value: FungibleTokenPacketData,
  fee?: StdFee,
  memo?: string
};

type sendQueryEscrowAddressRequestParams = {
  value: QueryEscrowAddressRequest,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};


type queryDenomHashResponseParams = {
  value: QueryDenomHashResponse,
};

type queryEscrowAddressResponseParams = {
  value: QueryEscrowAddressResponse,
};

type transferAuthorizationParams = {
  value: TransferAuthorization,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryDenomsRequestParams = {
  value: QueryDenomsRequest,
};

type queryDenomsResponseParams = {
  value: QueryDenomsResponse,
};

type msgTransferResponseParams = {
  value: MsgTransferResponse,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type queryDenomHashRequestParams = {
  value: QueryDenomHashRequest,
};

type queryTotalEscrowForDenomRequestParams = {
  value: QueryTotalEscrowForDenomRequest,
};

type queryTotalEscrowForDenomResponseParams = {
  value: QueryTotalEscrowForDenomResponse,
};

type tokenParams = {
  value: Token,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryDenomResponseParams = {
  value: QueryDenomResponse,
};

type msgTransferParams = {
  value: MsgTransfer,
};

type denomParams = {
  value: Denom,
};

type hopParams = {
  value: Hop,
};

type allocationParams = {
  value: Allocation,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryDenomRequestParams = {
  value: QueryDenomRequest,
};

type fungibleTokenPacketDataParams = {
  value: FungibleTokenPacketData,
};

type queryEscrowAddressRequestParams = {
  value: QueryEscrowAddressRequest,
};

type paramsParams = {
  value: Params,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendQueryDenomHashResponse({ value, fee, memo }: sendQueryDenomHashResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryDenomHashResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryDenomHashResponse({ value: QueryDenomHashResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryDenomHashResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryEscrowAddressResponse({ value, fee, memo }: sendQueryEscrowAddressResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryEscrowAddressResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryEscrowAddressResponse({ value: QueryEscrowAddressResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryEscrowAddressResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendTransferAuthorization({ value, fee, memo }: sendTransferAuthorizationParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendTransferAuthorization: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.transferAuthorization({ value: TransferAuthorization.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendTransferAuthorization: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryDenomsRequest({ value, fee, memo }: sendQueryDenomsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryDenomsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryDenomsRequest({ value: QueryDenomsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryDenomsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryDenomsResponse({ value, fee, memo }: sendQueryDenomsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryDenomsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryDenomsResponse({ value: QueryDenomsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryDenomsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgTransferResponse({ value, fee, memo }: sendMsgTransferResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgTransferResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgTransferResponse({ value: MsgTransferResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgTransferResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryDenomHashRequest({ value, fee, memo }: sendQueryDenomHashRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryDenomHashRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryDenomHashRequest({ value: QueryDenomHashRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryDenomHashRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryTotalEscrowForDenomRequest({ value, fee, memo }: sendQueryTotalEscrowForDenomRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryTotalEscrowForDenomRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryTotalEscrowForDenomRequest({ value: QueryTotalEscrowForDenomRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryTotalEscrowForDenomRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryTotalEscrowForDenomResponse({ value, fee, memo }: sendQueryTotalEscrowForDenomResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryTotalEscrowForDenomResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryTotalEscrowForDenomResponse({ value: QueryTotalEscrowForDenomResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryTotalEscrowForDenomResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendToken({ value, fee, memo }: sendTokenParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendToken: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.token({ value: Token.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendToken: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryDenomResponse({ value, fee, memo }: sendQueryDenomResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryDenomResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryDenomResponse({ value: QueryDenomResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryDenomResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgTransfer({ value, fee, memo }: sendMsgTransferParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgTransfer: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgTransfer({ value: MsgTransfer.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgTransfer: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendDenom({ value, fee, memo }: sendDenomParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendDenom: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.denom({ value: Denom.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendDenom: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendHop({ value, fee, memo }: sendHopParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendHop: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.hop({ value: Hop.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendHop: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendAllocation({ value, fee, memo }: sendAllocationParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendAllocation: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.allocation({ value: Allocation.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendAllocation: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryDenomRequest({ value, fee, memo }: sendQueryDenomRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryDenomRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryDenomRequest({ value: QueryDenomRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryDenomRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendFungibleTokenPacketData({ value, fee, memo }: sendFungibleTokenPacketDataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendFungibleTokenPacketData: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.fungibleTokenPacketData({ value: FungibleTokenPacketData.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendFungibleTokenPacketData: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryEscrowAddressRequest({ value, fee, memo }: sendQueryEscrowAddressRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryEscrowAddressRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryEscrowAddressRequest({ value: QueryEscrowAddressRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryEscrowAddressRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		queryDenomHashResponse({ value }: queryDenomHashResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomHashResponse", value: QueryDenomHashResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryDenomHashResponse: Could not create message: ' + e.message)
			}
		},
		
		queryEscrowAddressResponse({ value }: queryEscrowAddressResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryEscrowAddressResponse", value: QueryEscrowAddressResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryEscrowAddressResponse: Could not create message: ' + e.message)
			}
		},
		
		transferAuthorization({ value }: transferAuthorizationParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.TransferAuthorization", value: TransferAuthorization.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:TransferAuthorization: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryDenomsRequest({ value }: queryDenomsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomsRequest", value: QueryDenomsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryDenomsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryDenomsResponse({ value }: queryDenomsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomsResponse", value: QueryDenomsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryDenomsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgTransferResponse({ value }: msgTransferResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.MsgTransferResponse", value: MsgTransferResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgTransferResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryDenomHashRequest({ value }: queryDenomHashRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomHashRequest", value: QueryDenomHashRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryDenomHashRequest: Could not create message: ' + e.message)
			}
		},
		
		queryTotalEscrowForDenomRequest({ value }: queryTotalEscrowForDenomRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest", value: QueryTotalEscrowForDenomRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryTotalEscrowForDenomRequest: Could not create message: ' + e.message)
			}
		},
		
		queryTotalEscrowForDenomResponse({ value }: queryTotalEscrowForDenomResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse", value: QueryTotalEscrowForDenomResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryTotalEscrowForDenomResponse: Could not create message: ' + e.message)
			}
		},
		
		token({ value }: tokenParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.Token", value: Token.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Token: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryDenomResponse({ value }: queryDenomResponseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomResponse", value: QueryDenomResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryDenomResponse: Could not create message: ' + e.message)
			}
		},
		
		msgTransfer({ value }: msgTransferParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.MsgTransfer", value: MsgTransfer.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgTransfer: Could not create message: ' + e.message)
			}
		},
		
		denom({ value }: denomParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.Denom", value: Denom.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Denom: Could not create message: ' + e.message)
			}
		},
		
		hop({ value }: hopParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.Hop", value: Hop.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Hop: Could not create message: ' + e.message)
			}
		},
		
		allocation({ value }: allocationParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.Allocation", value: Allocation.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Allocation: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryDenomRequest({ value }: queryDenomRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomRequest", value: QueryDenomRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryDenomRequest: Could not create message: ' + e.message)
			}
		},
		
		fungibleTokenPacketData({ value }: fungibleTokenPacketDataParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.FungibleTokenPacketData", value: FungibleTokenPacketData.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:FungibleTokenPacketData: Could not create message: ' + e.message)
			}
		},
		
		queryEscrowAddressRequest({ value }: queryEscrowAddressRequestParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.QueryEscrowAddressRequest", value: QueryEscrowAddressRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryEscrowAddressRequest: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.applications.transfer.v1.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Allocation: getStructure(typeAllocation.fromPartial({})),
						TransferAuthorization: getStructure(typeTransferAuthorization.fromPartial({})),
						DenomTrace: getStructure(typeDenomTrace.fromPartial({})),
						FungibleTokenPacketData: getStructure(typeFungibleTokenPacketData.fromPartial({})),
						Token: getStructure(typeToken.fromPartial({})),
						Denom: getStructure(typeDenom.fromPartial({})),
						Hop: getStructure(typeHop.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			IbcApplicationsTransferV1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;