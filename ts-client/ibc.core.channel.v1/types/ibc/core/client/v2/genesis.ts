// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: ibc/core/client/v2/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CounterpartyInfo } from "./counterparty";

export const protobufPackage = "ibc.core.client.v2";

/** GenesisCounterpartyInfo defines the state associating a client with a counterparty. */
export interface GenesisCounterpartyInfo {
  /** ClientId is the ID of the given client. */
  clientId: string;
  /** CounterpartyInfo is the counterparty info of the given client. */
  counterpartyInfo: CounterpartyInfo | undefined;
}

/** GenesisState defines the ibc client v2 submodule's genesis state. */
export interface GenesisState {
  /** counterparty info for each client */
  counterpartyInfos: GenesisCounterpartyInfo[];
}

function createBaseGenesisCounterpartyInfo(): GenesisCounterpartyInfo {
  return { clientId: "", counterpartyInfo: undefined };
}

export const GenesisCounterpartyInfo: MessageFns<GenesisCounterpartyInfo> = {
  encode(message: GenesisCounterpartyInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.counterpartyInfo !== undefined) {
      CounterpartyInfo.encode(message.counterpartyInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisCounterpartyInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisCounterpartyInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.counterpartyInfo = CounterpartyInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisCounterpartyInfo {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      counterpartyInfo: isSet(object.counterpartyInfo) ? CounterpartyInfo.fromJSON(object.counterpartyInfo) : undefined,
    };
  },

  toJSON(message: GenesisCounterpartyInfo): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.counterpartyInfo !== undefined) {
      obj.counterpartyInfo = CounterpartyInfo.toJSON(message.counterpartyInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisCounterpartyInfo>, I>>(base?: I): GenesisCounterpartyInfo {
    return GenesisCounterpartyInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisCounterpartyInfo>, I>>(object: I): GenesisCounterpartyInfo {
    const message = createBaseGenesisCounterpartyInfo();
    message.clientId = object.clientId ?? "";
    message.counterpartyInfo = (object.counterpartyInfo !== undefined && object.counterpartyInfo !== null)
      ? CounterpartyInfo.fromPartial(object.counterpartyInfo)
      : undefined;
    return message;
  },
};

function createBaseGenesisState(): GenesisState {
  return { counterpartyInfos: [] };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.counterpartyInfos) {
      GenesisCounterpartyInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.counterpartyInfos.push(GenesisCounterpartyInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      counterpartyInfos: globalThis.Array.isArray(object?.counterpartyInfos)
        ? object.counterpartyInfos.map((e: any) => GenesisCounterpartyInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.counterpartyInfos?.length) {
      obj.counterpartyInfos = message.counterpartyInfos.map((e) => GenesisCounterpartyInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.counterpartyInfos = object.counterpartyInfos?.map((e) => GenesisCounterpartyInfo.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
